★ 챕터1장(다른 챕터와는 다르게 컴퓨터 네트워크의 감을 읽히고, 용어를 습득하는데 목적을 가진다.)
※ 공격 받는 네트워크
- 네트워크 보안
	+ Bad guy는 해커다.
	+ 네트워크 보안은 공격에 의해 방어를 하는 방법과 면역력을 가지는 구조를 디자너이가 어떻게 
	디자인 하는지에 중점을 둔다.
	+ 초창기에 사용하는 사람들은 연구 자료와 의견 교환을 할 때 네트워크를 사용하고, 디자인하였다.
	+ 그렇지만, 웹이 등장하게 되면서 조금 다르게 되었다. (층이 다양해졌다.)
	+ 모든 계층에서 보안을 고려해야 된다.!!(중요)


- 호스트에 맬웨어(malware) 침투(1)
	+ 해커는 인터넷을 통해 호스트에 맬웨어를 침투 시킬 수 있다.
	+ 멜웨어는 크게 두 가지가 나오게 되는데, 바이러스와 웜(worm)이 있다.
	+ 바이러스는 사용자와 상호작용이 필요한 맬웨어로, 숙주가 필요 있다.
	+ 벌레는 스스로 움직이며 생명력을 가지고 있으니, 숙주가 필요 없다. (ex 이메일을 실행할 때)
	+ 둘 다 자가 복제가 가능하다. 그러나 일상에서는 구분 없이 사용한다.
	+ 스파이웨어 맬웨어는 키보드와 같은 리코딩에 저장하여 녹화하거나, 웹사이트에 방문 기록같은 것을 몰래 저장한 후, 정보 같은 것들을 콜렉션 같은 사이트에 업로드한다.
	+ 감연된 호스트는 봇넷에 등록되어, 스팸, DDOS(distributed denial of service) 공격에 사용한다.
	+ 자가 복제는 감염된 호스트에서 다른 호스트의 엔트리를 찾는다.
	+ 바이러스는 악의적인 첨부물을 사용자 주소록의 수신자에게 전송하여 자가 복제한다.
	+ 웜은 취약한 네트워크 애플리케이션을 수행하는 다른 호스트를 찾고자 인터넷을 스캔하여 자기복제한다.


- 서버와 네트워크 기반구조(Network Infrastructure) 공격
	+ Dos(Denial of Service) 공격은 공격자가 가짜 트랙픽을 발생하여 자원(서버, 대역폭) 등을 과점하여 
	정상적인 사용자가 사용할 수 없게 된다.
	1. 타겟을 선택한다. 
	2. 네트워크 주변에 있는 호스트들 안에 침투하여 봇넷 생성한다. 
	3. 패킷들을 타겟에게 보낸다.
	+ 분산 Dos(DDOS)는 수 천 개의 호스트로 구성된 봇넷을 이용한다.

	
- 패킷을 감지(Packet Sniffing)
	+ 방송망 형태로 시도가 된다.( shared Ethernet, wireless)
	+ 방송 매체상에서 송수신되는 패킷의 사본을 탐지하여 읽고 기록한다.
	+ 정상 사용자는 받고 버리지만, 해커들은 받고 공격에 사용한다.
	+ 패킷 스니퍼(Packet Sniffer)는 지나가는 모든 패킷 사본을 기록하는 수동적인 수신자이다.
	+ 또한 본 수업에서 사용하는 Wireshark 소프트웨어도 패킷 스니퍼이다.


- 위장(Masquerading)
	+ IP 스푸핑(ip spoofing)은 거짓의 출발지 주소를 가진 패킷을 전송한다.
	+ 또한 한 사용자가 다른 사용자인 것처럼 위장한다.
	+ ppt69페이지에 예시로, A,B가 있는데 공격자가 A에게 B인것 처럼 위장하여 메세지를 보낸다.


- 인터넷 역사
	+ 1961: Kleinrock이 큐잉 이론을 통해서 패킷 스위칭이 서킷 스위칭보다 효율적일 수 있다고 증명함.
	+ 1972: 최초의 네트워크가 15개 노드를 가진 ARTAnet이 시연을 하였다.
	+ 1970: 하와이에서 ALOHAnet이 등장하게 된다.
	+ 1974: Cerf와 Kahn이 인터넷에 대한 구조를 만들어내게 된다.
	+ 1976: 이더넷 프로토콜이 개발됨.
	+ 1970말에 독점 네트워크들이 대거 등장하게 된다. (ex: DECnet, SNA, XNA)
	+ 1970말에 많은 원리들이 등장하게 되는데, 이전까지 패킷의 길이가 가변인 네트워크였다. 그러나 1970년대 말에 길이가 가변이니깐 다루기가 힘들어, 길이를 똑같이 동일하게 하는게 좋지 않는가를 제안을 하게 되었다. (ATM precursor)
	+ 1979: ARPAnet에 200개의 노드들을 확장했다.

	+ Cerf와 Kahn`s의 internetworking을 제안하는 원리들은 다음과 같다.
	1. 네트워크들을 상호 연결하는데 네트워크 자체에 내부 변화가 요구가 최소화되게 하자.
	2. 최선의 노력을 다하는 서비스 모델이 되자.
	(미국인 관점에서의 최선의 노력은 말 그대로 최선은 다하지만 보장성은 없다 라는 의미가 있다.)
	(그래서 우리나라 관점과 다른 나라의 관점의 차이가 있다는 것을 알자.)
	3. 이전 정보를 갖고 있지 않은 라우터들을 가지자.
	(동작이 더 간편해진다.)
	4. 각각의 라우터가 알아서 경로를 찾고 경로에 따라서 목적지까지 전송을 제어하도록 하자.

	+ 1983: TCP/IP가 등장하게 되면서, 공짜로 제공하게 되었다.
	(인터넷 계층 내부를 수정하거나 고칠 필요가 없도록 상호 연결이 가능하게 만들었다.)
	+ 1982: 애플리케이션에 정의된 SMTP 프로토콜이 정의도있다.
	+ 1983: 이름을 IP로 주소 변환하는 DNS 정의하였다. (★★★★★★★)
	+ 1990~2000년대에 가게 되면 1990년 초에 웹(하이퍼 텍스트 기반)이 등장하게 된다.
	+ 1990년 초 때, HTML, HTTP에서 그냥 클릭만 하면(별 동작없이) 링크로 이동하게 되어
	엄청 각광받게 되었다.
	+ 1990~2000년대에 메세지와 관련된 앱들이 많이 등장하게 된다. (ex 카카오톡)
	+ 2005~현재에는 50억개의 디바이스들이 인터넷에 참여하고 있다. (2016)
	+ 2005~현재에는 구글이나 마이코르소프트가 더 빠른 인터넷 서비스를 위해서 등장하게 되었다.
	


★ 챕터 3장 Transport Layer
※ 트랜스포트 계층 서비스 개요
- 우리의 목표
	+ 3단계 모델
	1. Connection establishment(set up)
	2. Data Transfer
	3. Connection Termination	
	+ UDP는 비연결형 트랜스포트이며, 2번만 가지고있다.
	+ TCP는 연결지향형 트랜스포트이며, 123전부 가지고 있다.
	+ 스위치는 온/오프(연결에 대한) 동작을 하드웨어적으로 동작을 빠르게 처리하는 것을 말한다.


- 트랜스포트 서비스와 프로토콜
	+ 서로 다른 호스트에서 동작하는 애플리케이션 프로세스 간의 논리적 통신을 제공한다.
	+ 트랜스포트는 호스트(end systems)에서만 구동이 된다.
	+ 송수신할 때, 송신측에서는 애플리케이션 메세지를 세그먼트를 분할하여 네트워크 계층에서 전달한다.
	+ 수신측에서는 세그먼트를 메세지로 결합하여 애플리케이션 계층에 전달한다.
	+ 애플리케이션에 하나 이상의 트랜스포트 프로토콜은 인터넷에서 TCP와 UDP가 제공된다.


- 트랜스포트와 네트워크 계층
	+ 네트워크 계층은 호스트들 사이의 논리적 통신을 제공한다.
	+ 트랜스포트 계층은 프로세스들 사이의 논리적 통신을 제공하며, 네트워크 계층 서비스에 의존한다.


- 인터넷 트랜스포트 프로토콜 계층(★★★★★★★)
	+ 신뢰적, 순서적인 데이터 전달은 TCP이며, 혼잡 제어, 흐름 제어, 연결 설정을 한다.
	+ 비신뢰적, 비순서적인 데이터 전달은 UDP이며, IP와 같은 최선형 전달 서비스이다.
	+ 또한 UDP는 혼잡 제어, 흐름 제어, 연결 설정을 안하고, 그 대신 장점으로는 데이터 전소이 빠르다.
	+ 제공되지 않는 서비스는 지연 보장, 대역폭 보장도 없다.


※ 다중화와 역다중화
- 다중화/역다중화
	+ 분리된 흐름을 하나의 흐름으로 모아주는 역할을 다중화, 반대로 모여진 흐름을 다시 분리된 
	흐름으로 바꾸는 것을 역다중화라고 한다.
	+ 애플리케이션에서 트랜스포트로 내려갈 때, 인터넷 프로토콜(TCP, UDP)을 고르게 된다.
	+ 애플리케이션 -> 트랜스포트 (다중화)
	+ 애플리케이션 <- 트랜스포트 (역다중화)

	+ 송신 호스트 다중화 입장에서는 소켓들로부터 데이터를 모으고, 프랜스포트 헤더를 추가한다.
	(나중에 역 다중화에서 사용)
	+ 수신 호스트 역다중화 입장에서는 헤더 정보를 사용하여 수신된 세그먼트들을 올바른 소켓에 전달함.
	

- 역다중화(demultiplexing) 동작
	+ 데이터그램은 출발지(소스) IP 주소, 목적지 IP 주소를 가진다.
	+ 데이터그램은 한 개의 트랜스포트 계층 세그먼트를 가진다.
	+ 세그먼트는 출발지, 목적지 포트번호를 가진다.
	+ 호스트는 IP 주소와 포트번호를 사용하여 세그먼트를 해당 소켓에 전달한다.


- 비연결형 역다중화
	+ 포트번호를 갖는 소켓을 생성(12534)
	+ UDP 소켓은 두 요소로 구분한다.(목적지 IP주소, 목적지 포트번호)
	+ 호스트가 UDP 세그먼트 수신 시, 세그먼트 내의 목적지 포트번호를 조사하고, 해당 포트번호를 갖는 
	소켓에 UDP 세그먼트를 전달한다.
	+ IP 데이터그램들의 출발지 IP 주소 또는 출발지 포트번호가 다르더라도 모두 동일한 목적지 IP주소와
	목적지 포트번호를 가지면 같은 소켓에 전달(★★★★★★)
	

- 연결지향형 역다중화(Connection-Oriented Demultiplexer)
	+ TCP는 4개 요소로 구분한다. (출발지 IP주소, 출발지 포트번호) (목적지 IP주소, 목적지 포트번호)
	(★★★★★★)
	+ 수신 측 호스트는 4개의 값을 사용하여 해당 소켓으로 세그먼트를 전달한다.
	+ 서버 호스트는 동시에 많은 TCP 소켓들을 지원을 할 수 있다.
	+ 웹 서버는 연결되는 각 클라이언트마다 다른 소켓들을 가진다.
	(비지속 HTTP는 각 요청에 대해서 다른 소켓을 가진다.)
	+ IP, 주소, 포트넘버들 중에 목적지와는 값이 같지만, 하지만 출발지에서의 값이 다르다면 연결지향형 
	역다중화라고 부른다.